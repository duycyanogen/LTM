
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Admin
 */
public class UDPServerForm extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form UDPClientForm
     */
    public UDPServerForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtKey = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        btnEncode = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResult = new javax.swing.JTextArea();
        btnListen = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        txtStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("SERVER");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 51, 51));
        jLabel4.setText("KEY:");

        btnEncode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEncode.setForeground(new java.awt.Color(51, 51, 255));
        btnEncode.setText("ENCODE");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 51, 51));
        jLabel5.setText("List prime number:");

        txtResult.setColumns(20);
        txtResult.setRows(5);
        jScrollPane1.setViewportView(txtResult);

        btnListen.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnListen.setText("LISTEN");
        btnListen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListenActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 51, 51));
        jLabel6.setText("Port");

        txtPort.setText("8888");

        txtStatus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtStatus.setForeground(new java.awt.Color(255, 0, 0));
        txtStatus.setText("WAITING...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(283, 283, 283)
                        .addComponent(jLabel1)))
                .addGap(0, 19, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(26, 26, 26)
                            .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(26, 26, 26)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnListen, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEncode, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnListen)
                    .addComponent(jLabel6)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jLabel5)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEncode)
                    .addComponent(txtStatus))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private boolean isRunning = false;
    DatagramSocket socket = null;
    int port = 8888;
    byte[] BUFFER = new byte[4096];

    public boolean isIsRunning() {
        return isRunning;
    }

    public void setIsRunning(boolean isRunning) {
        this.isRunning = isRunning;
    }
    private void btnListenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListenActionPerformed
        // TODO add your handling code here:  
        if (!isRunning) {
            try {
                port = Integer.parseInt(txtPort.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "Can't start at this port, program will use the default port=8888\nDetails: " + e,
                        "Error while read Port", JOptionPane.ERROR_MESSAGE);
            }
        }
        isRunning = !isRunning;
        try {
            //Hiểu nôm na là chạy Server tại port này
            if (!isRunning) {
                if (socket != null) {
                    socket.close();
                }
            } else {
                socket = new DatagramSocket(port);
                JOptionPane.showMessageDialog(this, "Server is running at port: " + port, "Started server", JOptionPane.INFORMATION_MESSAGE);
            }
            if (isRunning) {
                btnListen.setText("STOP");
            } else {
                btnListen.setText("LISTEN");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Details: " + e, "Start server error",
                    JOptionPane.ERROR_MESSAGE);
        }

        Thread t = new Thread(this);
        t.start();

    }//GEN-LAST:event_btnListenActionPerformed

    private DatagramPacket receiveData(DatagramSocket server) throws IOException {
        byte temp[] = new byte[1024];
        DatagramPacket receivePacket = new DatagramPacket(temp, temp.length);
        server.receive(receivePacket);
        return receivePacket;
    }

    private void sendData(String data, DatagramSocket client, InetAddress ipser, int port) throws IOException {
        byte temp[] = new byte[1024];
        temp = data.getBytes();
        DatagramPacket sendPacket = new DatagramPacket(temp, temp.length, ipser, port);
        client.send(sendPacket);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UDPClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UDPClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UDPClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UDPClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UDPServerForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEncode;
    private javax.swing.JButton btnListen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtKey;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextArea txtResult;
    private javax.swing.JLabel txtStatus;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (true) {
            try {
                txtStatus.setText("Server is running...");
                if (!isRunning) {
                    txtStatus.setText("Server has been stopped...");
                    break;
                }
                byte temp[] = new byte[1024];
                DatagramPacket receivePacket = new DatagramPacket(temp, temp.length);
                socket.receive(receivePacket);
                String result = new String(receivePacket.getData()).trim();//ping result
                if (result.equals("ping")) //ping case
                {
                    sendData("OK", socket, receivePacket.getAddress(), receivePacket.getPort());
                } else {
                    if (result.equals("0")) {//File type = Binary
                        byte bufferedFileName[] = new byte[1024];
                        DatagramPacket fileNamePacket = new DatagramPacket(bufferedFileName, bufferedFileName.length);
                        socket.receive(fileNamePacket);
                        byte bufferedListNumber[] = new byte[1024];
                        DatagramPacket listNumberPacket = new DatagramPacket(bufferedListNumber, bufferedListNumber.length);
                        socket.receive(listNumberPacket);
                        String fileName = new String(fileNamePacket.getData()).trim();
                        String listInteger = new String(listNumberPacket.getData()).trim();//list integer
                        System.out.println(fileName);
                        System.out.println(listInteger);
                        writeFileBinary(fileName, listInteger);// ghi file
                        String primeNumberList = listPrimeNumber(readFileBinary(fileName));
                        txtResult.setText(primeNumberList);
                        sendData(primeNumberList, socket, receivePacket.getAddress(), receivePacket.getPort());
                    } else {// File type = Text
                        byte bufferedFileName[] = new byte[1024];
                        DatagramPacket fileNamePacket = new DatagramPacket(bufferedFileName, bufferedFileName.length);
                        socket.receive(fileNamePacket);
                        byte bufferedListNumber[] = new byte[1024];
                        DatagramPacket listNumberPacket = new DatagramPacket(bufferedListNumber, bufferedListNumber.length);
                        socket.receive(listNumberPacket);
                        String fileName = new String(fileNamePacket.getData()).trim();
                        String listInteger = new String(listNumberPacket.getData()).trim();//list integer
                        System.out.println(fileName);
                        System.out.println(listInteger);
                        writeFile(fileName, listInteger);// ghi file
                        String primeNumberList = listPrimeNumber(readFile(fileName));
                        txtResult.setText(primeNumberList);
                        sendData(primeNumberList, socket, receivePacket.getAddress(), receivePacket.getPort());
                    }
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }

        }

    }

    private boolean primeNumber(int number) {
        int i, m = 0, flag = 0;
        m = number / 2;
        if (number == 0 || number == 1) {

        } else {
            for (i = 2; i <= m; i++) {
                if (number % i == 0) {
                    flag = 1;
                    break;
                }
            }
            if (flag == 0) {
                return true;
            }
        }
        return false;
    }

    private String listPrimeNumber(String listInteger) {
        String result = "";
        String temp[] = listInteger.split(",");
        for (int i = 0; i < temp.length; i++) {
            if (primeNumber(Integer.parseInt(temp[i]))) {
                result = result.concat(temp[i]).concat(",");
            }
        }
        if (!result.equals("")) {
            result = result.substring(0, result.length() - 1);
        } else {
            result = "There is not any prime number in the given list";
        }
        return result;
    }

    private void writeFile(String fileName, String data) throws IOException {
        FileOutputStream file = null;
        FilterOutputStream filter = null;
        try {
            file = new FileOutputStream(new File(fileName));

            filter = new FilterOutputStream(file);
            //String s = "gpcoder.com";
            byte b[] = data.getBytes();
            filter.write(b);
            filter.flush();

        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private void writeFileBinary(String fileName, String data) throws IOException {
        FileOutputStream file = null;
        ObjectOutputStream filter = null;
        try {
            file = new FileOutputStream(new File(fileName));

            filter = new ObjectOutputStream(file);
            //String s = "gpcoder.com";
            byte b[] = data.getBytes();
            filter.write(b);
            filter.flush();

        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private String readFile(String fileName) throws IOException {
        String result = "";
        FileInputStream file = null;
        FilterInputStream filter = null;
        try {
            file = new FileInputStream(new File(fileName));
            filter = new BufferedInputStream(file);

            int k = 0;
            while ((k = filter.read()) != -1) {
                result += (char) k;
            }
            return result;
        } catch (IOException ex) {
            ex.printStackTrace();
            return null;
        } finally {
            filter.close();
            file.close();
        }
    }

    private String readFileBinary(String fileName) throws IOException {
        String result = "";
        FileInputStream file = null;
        ObjectInputStream filter = null;
        try {
            file = new FileInputStream(new File(fileName));
            filter = new ObjectInputStream(file);

            int k = 0;
            while ((k = filter.read()) != -1) {
                result += (char) k;
            }
            return result;
        } catch (IOException ex) {
            ex.printStackTrace();
            return null;
        } finally {
            filter.close();
            file.close();
        }
    }

}
